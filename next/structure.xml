<?xml version="1.0" encoding="utf-8"?>
<project title="Monk ID PHP" version="2.2.0&#10;">
  <partials/>
  <file path="Id.php" generated-path="Id.html" hash="d25a7799c421803ef26977a47165a05c" package="Default">
    <docblock line="0">
      <description>Global Monk namespace.</description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="Monk" line="15" package="Default">
      <extends/>
      <name>Id</name>
      <full_name>\Monk\Id</full_name>
      <docblock line="15">
        <description>Integrate Monk ID on the server-side by accessing payloads from the
client-side JavaScript.</description>
        <long-description></long-description>
        <tag name="author" line="15" description="Monk Development, Inc."/>
        <tag name="copyright" line="15" description="2013 Monk Development, Inc."/>
      </docblock>
      <constant namespace="Monk" line="20" package="Default">
        <name>COOKIE_NAME</name>
        <full_name>\Monk\Id::COOKIE_NAME</full_name>
        <value>'_monkIdPayload'</value>
        <docblock line="20">
          <description>Name of the cookie that (optionally) stores the payload.</description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="true" visibility="private" line="27" namespace="Monk" package="Default">
        <name>$config</name>
        <default></default>
        <docblock line="27">
          <description>Config values.</description>
          <long-description></long-description>
          <tag name="var" line="27" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="true" visibility="private" line="34" namespace="Monk" package="Default">
        <name>$payload</name>
        <default></default>
        <docblock line="34">
          <description>Decoded and verified payload.</description>
          <long-description></long-description>
          <tag name="var" line="34" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="private" namespace="Monk" line="40" package="Default">
        <name>__construct</name>
        <full_name>\Monk\Id::__construct()</full_name>
        <docblock line="40">
          <description>Prevent the class from being instantiated as all data and methods are
static.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="52" package="Default">
        <name>loadConfig</name>
        <full_name>\Monk\Id::loadConfig()</full_name>
        <docblock line="52">
          <description>Load an INI config file for a specific environment.</description>
          <long-description></long-description>
          <tag name="param" line="52" description="&lt;p&gt;Path of INI config file to load. Leave &lt;code&gt;null&lt;/code&gt; to&#10;  read from environment's &lt;code&gt;MONK_ID_CONFIG&lt;/code&gt; value.&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="52" description="&lt;p&gt;Environment section to use. Leave &lt;code&gt;null&lt;/code&gt; to&#10;  read from environment's &lt;code&gt;MONK_ID_ENV&lt;/code&gt; value. Defaults to &lt;code&gt;development&lt;/code&gt;.&lt;/p&gt;" type="string" variable="$environment">
            <type>string</type>
          </tag>
          <tag name="return" line="52" description="Loaded config values." type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="52" description="If the file doesn't exist or can't be read." type="\Exception">
            <type link="Exception.html">\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$environment</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="Monk" line="72" package="Default">
        <name>verifyConfig</name>
        <full_name>\Monk\Id::verifyConfig()</full_name>
        <docblock line="72">
          <description>Verify that a config has all the required values.</description>
          <long-description></long-description>
          <tag name="param" line="72" description="&lt;p&gt;Config values.&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="72" description="If valid." type="true">
            <type>true</type>
          </tag>
          <tag name="throws" line="72" description="If invalid." type="\Exception">
            <type link="Exception.html">\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="94" package="Default">
        <name>config</name>
        <full_name>\Monk\Id::config()</full_name>
        <docblock line="94">
          <description>Get a config value. Attempts to load the config if it hasn't already been
loaded.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;Name of config value.&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="Config value." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="94" description="If the config can't be loaded." type="\Exception">
            <type link="Exception.html">\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="Monk" line="109" package="Default">
        <name>decodePayload</name>
        <full_name>\Monk\Id::decodePayload()</full_name>
        <docblock line="109">
          <description>Decode a payload from the client-side.</description>
          <long-description></long-description>
          <tag name="param" line="109" description="&lt;p&gt;Encoded payload.&lt;/p&gt;" type="string" variable="$encodedPayload">
            <type>string</type>
          </tag>
          <tag name="return" line="109" description="Decoded payload." type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="109" description="If payload can't be decoded." type="\Exception">
            <type link="Exception.html">\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$encodedPayload</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="Monk" line="125" package="Default">
        <name>expectedSignature</name>
        <full_name>\Monk\Id::expectedSignature()</full_name>
        <docblock line="125">
          <description>Generate the expected signature of a payload using the app's secret.</description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;Decoded payload.&lt;/p&gt;" type="array" variable="$payload">
            <type>array</type>
          </tag>
          <tag name="return" line="125" description="Expected signature of the payload." type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$payload</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="Monk" line="138" package="Default">
        <name>verifyPayload</name>
        <full_name>\Monk\Id::verifyPayload()</full_name>
        <docblock line="138">
          <description>Verify that a payload hasn't been tampered with or faked by comparing
signatures.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;Decoded payload.&lt;/p&gt;" type="array" variable="$payload">
            <type>array</type>
          </tag>
          <tag name="return" line="138" description="Whether the payload is legit." type="bool">
            <type>bool</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$payload</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="153" package="Default">
        <name>loadPayload</name>
        <full_name>\Monk\Id::loadPayload()</full_name>
        <docblock line="153">
          <description>Load a payload from the client-side.</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Encoded payload or cookies array to&#10;  automatically load the payload from. Leave &lt;code&gt;null&lt;/code&gt; to read from global&#10;  &lt;code&gt;$_COOKIE&lt;/code&gt;.&lt;/p&gt;" type="string|array" variable="$encodedPayload">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="return" line="153" description="Decoded and verified payload. Empty if there's no payload&#10;  or it fails verification." type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$encodedPayload</name>
          <default>null</default>
          <type>string|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="Monk" line="187" package="Default">
        <name>payload</name>
        <full_name>\Monk\Id::payload()</full_name>
        <docblock line="187">
          <description>Get the loaded payload.</description>
          <long-description></long-description>
          <tag name="return" line="187" description="Loaded payload. Empty if there's no payload or it failed&#10;  verification." type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="Monk" line="201" package="Default">
        <name>payloadUser</name>
        <full_name>\Monk\Id::payloadUser()</full_name>
        <docblock line="201">
          <description>Get a value from the `user` object of the loaded payload.</description>
          <long-description></long-description>
          <tag name="param" line="201" description="&lt;p&gt;Name of value.&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="return" line="201" description="Requested value or `null` if not set." type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="218" package="Default">
        <name>userId</name>
        <full_name>\Monk\Id::userId()</full_name>
        <docblock line="218">
          <description>Get the signed in user's UUID.</description>
          <long-description></long-description>
          <tag name="return" line="218" description="UUID if signed in user or `null` if no signed in&#10;  user." type="string|null">
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="228" package="Default">
        <name>userEmail</name>
        <full_name>\Monk\Id::userEmail()</full_name>
        <docblock line="228">
          <description>Get the signed in user's email address.</description>
          <long-description></long-description>
          <tag name="return" line="228" description="Email address if signed in user or `null` if no&#10;  signed in user." type="string|null">
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="237" package="Default">
        <name>signedIn</name>
        <full_name>\Monk\Id::signedIn()</full_name>
        <docblock line="237">
          <description>Check whether there's a signed in user.</description>
          <long-description></long-description>
          <tag name="return" line="237" description="Whether there's a signed in user." type="bool">
            <type>bool</type>
          </tag>
        </docblock>
      </method>
    </class>
    <source>eJylWFlvGzcQfs+vmAAGVg5cp+n14NR1AlsN1CR20CDpg2tI1C4lMV6R2yUlW0j93zu8dsk9JLl50bUzw5lvvjmoX8+KRfHkCcDzZ8/wFZ7Bm1xMSQ7vBb8FTpZUFiSlx+bZc3ytfjISLyPVEVd0XhJln8HoAgQHtaAgabmm5XeSZRSmGyBpSqVkfA4F2eSCZBJmpVhqUWsozRnlysr/QdbkY1qyQlknrMQrslILUeJne9YFXdNcFEtUO0I/0mMnlopiU7L5QsEP37/4cZusDi7NiZQwyuCrjquKTFu6xLhBzEw4qRC3jOJHomAgCsUEJ3m+OQSpREmlkXGRHTv95+Y9FVwqOL+6ejsaji9fvx/CKSTjJTo1yj5YheRl6+hzwWdsDmuSr6j0Bv3DV2tSAilLsolOKkq21omQiiiWwkFqbLRtX9BUZDQDwjPAFLEZwy8N3x95lNNun/WhROC5shAapE3Wp1QzgSEyhCuGltAbCQgoZEQR49mSYrKRJaSk3pg97bjTk9mKpzopMB4bxMtVqgaH8BUeWj69Q0/xCBhdjsBiBDOWownkFgFZ0BQhSYHyNSsF15RpoVKQkiwBHSp1HBi+WsAH/YJsaZpVAgyy8I6SNYUJX+X5BH/1xgBKig4ZXIIzEwmT91eXb8eji/H51eXvozcTS4fjPi8CZRgGnyW1yKAjK0m/xY/h5WfvBLJoRla5ktrsJKvLa1L7V1K1Krmlj0Ed05x2ERteqUUp7iT8PbxPqSkuGNm6MxBmgkqeKKD3DGsJ05QS/XVKjcsNQqymOWbPMbOihU6BLaqBTdcpaACOYtjsj0gbaxK8qH0/c+8nMKcK1QZJnKDk8KXXi41GX8/ir21jiPL/tJQEefBNBXwjQG0kjKRjxtlYw2qBOAKsFVqfVwm7T9fhGTeVUUnz2cmJaR8bj6tVOKxkXP6taMuwPbFdnp+NTdtpiefLwrUHTYmS/rNiJXKppzu6srC088d2NtSKohoCzTh8zLIdrGQ8kupsiBXtIoBij5pcYzMYPPUYVr8CGCeA07vAj0HChYcmN4VVM+bBvdNc0tDmdUKKYsyy5GYv6xMrPYkqdt9TsOUgso85yWr0nxZTSuerjz9vaMAb16xeK0WXhW1WGi830o0Ies+UJphuKSTXHWWDrYVyb9ACvGsG3NJNtTBEhze5tmT3yN3zTpHeNugsVn0v9mlr50tddaKDDbIxKakaROV5GGbMPgk6Z28+IhvX+qibvvTY7QMz5HaGag0MN8BdYFNuVhi3P+G0sxtNY4lpTCC/97SkOlH37lWQZ1Z9v7q3ws6/QcPfYL44oz6QU/giBR/bXwdTIukvP/lvTSNV4476R2xwd/3NCE6CTNeF1fRx99de44j+MuTU3At0auk9blV6y5NszgmaMWVSc2BlbgZaEnsBbhy2G+zo7F65N6+enJY0w04fevf2vsz6UD56K4PYnRryFdfl5X+/TnD5KpOb66Q6H/tjc1ZiG1qMF0uSDhK5ID+/+CE5spSwyW9ZQxbY2nNVHnbfw2i07xq0Hk3XCHUDBEWWBdWT9o7p3baEGbnFb3idS8USk4GwVru5D2rXPN43a1MhcvhrgbcAWoZZAiYhp3OmHjOAfSH2peqg5sQpNMruUfkLDZ261LQZUznQlxp7RfmGFvmvi3R7ozSrtLnYSpee8DqA122x1Gjqi249NkOnWpeJ4A4xN38q1OYmB2N7C+67IWy9l8IQ5/dGNzlNCIo9AjcH97A+A+PBWa57mnQmUqJpsPcVoadjdy5rvV3dPmZybOJqyYWCUBfEaTNb15Y+wV8HNy8rxYfqk97A9rTYVg/XuMBIaMJlbYs3D/EIalVXc02ojVuA2qNGlZtub6yFxnSNq8loVPw5jW4qvSoeB6RLuoBBsAoc0DCQ0PCMIGg7NqIAx0rzrA7oJEage5nVRWf3vd5/abpu2vtUTlAwNCijLaXT02advcG2DbPo4H+9YvrU7Noxi5DKfdu/WavrtjnRrXsCYvoFG7Gf+jsg3bLeb9vr/8TLKZXK3041wK45IiBc6H9j9pxczrFP6HpjeW/VQ1FjF6BvwW/NL7OdH3ZUZ7dk14WvratDjCX7uaxHJOLDOJhzJHz6NLroo7QbZ9q+kdORxQaaENePa0Jrub1mgBYchTSOyBemJGHVjvyIUOkSSw1IluGi1N6UOmIehgq7g69DjuX2Dt6ct1f8JpR+CM4XNL2Fu3qBM62H9Pi1a/vbqrw1KKsy4u2Ynj61UfmcB5Hgy9lvT/4DwliPiA==</source>
  </file>
  <package name="Default" full_name="Default"/>
  <namespace name="Monk" full_name="Monk"/>
  <deprecated count="0"/>
</project>
