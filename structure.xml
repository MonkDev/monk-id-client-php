<?xml version="1.0" encoding="utf-8"?>
<project title="Monk ID PHP" version="2.8.5">
  <partials/>
  <file path="Id.php" generated-path="Id.html" hash="6f391b731d6d93405413395b9e978639" package="Default">
    <docblock line="0">
      <description>Global Monk namespace.</description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="Monk" line="14" package="Default">
      <extends/>
      <name>Id</name>
      <full_name>\Monk\Id</full_name>
      <docblock line="14">
        <description>Integrate Monk ID authentication and single sign-on for apps and websites
on the server-side.</description>
        <long-description></long-description>
        <tag name="author" line="14" description="Monk Development, Inc."/>
        <tag name="SuppressWarnings" line="14" description="(PHPMD.ElseExpression)"/>
        <tag name="package" line="14" description="Default"/>
      </docblock>
      <constant namespace="Monk" line="19" package="Default">
        <name>COOKIE_NAME</name>
        <full_name>\Monk\Id::COOKIE_NAME</full_name>
        <value>'_monkIdPayload'</value>
        <docblock line="19">
          <description>Name of the cookie that (optionally) stores the payload.</description>
          <long-description></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="55" package="Default">
        <name>loadConfig</name>
        <full_name>\Monk\Id::loadConfig()</full_name>
        <docblock line="55">
          <description>Load an INI config file for a specific environment.</description>
          <long-description></long-description>
          <tag name="param" line="55" description="&lt;p&gt;Path of INI config file to load. Leave &lt;code&gt;null&lt;/code&gt; to&#10;read from environment's &lt;code&gt;MONK_ID_CONFIG&lt;/code&gt; value.&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;Environment section to use. Leave &lt;code&gt;null&lt;/code&gt; to&#10;read from environment's &lt;code&gt;MONK_ID_ENV&lt;/code&gt; value. Defaults to &lt;code&gt;development&lt;/code&gt;.&lt;/p&gt;" type="string" variable="$environment">
            <type>string</type>
          </tag>
          <tag name="return" line="55" description="Loaded config values." type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="55" description="If the file doesn't exist or can't be read." type="\Exception">
            <type>\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$environment</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="98" package="Default">
        <name>config</name>
        <full_name>\Monk\Id::config()</full_name>
        <docblock line="98">
          <description>Get or set a config value. Attempts to load the config if it hasn't
already been loaded.</description>
          <long-description></long-description>
          <tag name="param" line="98" description="&lt;p&gt;Name of config value.&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="98" description="&lt;p&gt;New config value. Leave unset to get a config value.&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="98" description="Config value." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="throws" line="98" description="If the config can't be loaded or is invalid." type="\Exception">
            <type>\Exception</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="207" package="Default">
        <name>loadPayload</name>
        <full_name>\Monk\Id::loadPayload()</full_name>
        <docblock line="207">
          <description>Load a payload from the client-side.</description>
          <long-description></long-description>
          <tag name="param" line="207" description="&lt;p&gt;Encoded payload or cookies array to&#10;automatically load the payload from. Leave &lt;code&gt;null&lt;/code&gt; to read from global&#10;&lt;code&gt;$_COOKIE&lt;/code&gt;.&lt;/p&gt;" type="string|array" variable="$encodedPayload">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="return" line="207" description="Decoded and verified payload. Empty if there's no payload&#10;  or it fails verification." type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$encodedPayload</name>
          <default>null</default>
          <type>string|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="264" package="Default">
        <name>userId</name>
        <full_name>\Monk\Id::userId()</full_name>
        <docblock line="264">
          <description>Get the logged in user's UUID.</description>
          <long-description></long-description>
          <tag name="return" line="264" description="UUID if logged in user or `null` if no logged in&#10;  user." type="string|null">
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="275" package="Default">
        <name>userEmail</name>
        <full_name>\Monk\Id::userEmail()</full_name>
        <docblock line="275">
          <description>Get the logged in user's email address.</description>
          <long-description></long-description>
          <tag name="return" line="275" description="Email address if logged in user or `null` if no&#10;  logged in user." type="string|null">
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="285" package="Default">
        <name>loggedIn</name>
        <full_name>\Monk\Id::loggedIn()</full_name>
        <docblock line="285">
          <description>Check whether there's a logged in user.</description>
          <long-description></long-description>
          <tag name="return" line="285" description="Whether there's a logged in user." type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Monk" line="296" package="Default">
        <name>signedIn</name>
        <full_name>\Monk\Id::signedIn()</full_name>
        <docblock line="296">
          <description>Check whether there's a logged in user.</description>
          <long-description></long-description>
          <tag name="deprecated" line="296" description="1.1.0 Use `loggedIn`."/>
          <tag name="return" line="296" description="Whether there's a logged in user." type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
    </class>
    <source>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</source>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="global" full_name="global"/>
  <namespace name="Monk" full_name="Monk"/>
  <deprecated count="1"/>
</project>
